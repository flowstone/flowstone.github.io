<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nuxt.js 实战：从放弃到入门 on 薛尧笔记</title><link>https://flowstone.github.io/categories/nuxt.js-%E5%AE%9E%E6%88%98%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E5%85%A5%E9%97%A8/</link><description>Recent content in Nuxt.js 实战：从放弃到入门 on 薛尧笔记</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Sat, 15 Feb 2025 19:18:42 +0000</lastBuildDate><atom:link href="https://flowstone.github.io/categories/nuxt.js-%E5%AE%9E%E6%88%98%E4%BB%8E%E6%94%BE%E5%BC%83%E5%88%B0%E5%85%A5%E9%97%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>《Nuxt.js 实战：从放弃到入门》六、打造个性化文字转图片工具：代码详解与实践</title><link>https://flowstone.github.io/post/2025/20250215-01/</link><pubDate>Sat, 15 Feb 2025 19:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250215-01/</guid><description>在当今短视频的时代，将文字转化为图片是一个常见且实用的需求，无论是用于社交媒体分享、设计宣传材料，还是制作个性化的视觉内容。今天，我们就来深入剖析一个使用 Vue 3 和 ElementPlus 构建的文字转图片工具的代码，了解它是如何实现丰富的自定义功能以及图片生成和下载。
整体功能概述 这个工具提供了一个直观的界面，允许用户输入文本，并对生成图片的多个方面进行个性化设置，包括字体样式、大小、颜色，背景颜色、图片尺寸、水印设置和边距设置等。用户设置完成后，可以点击 “生成图片” 按钮，工具会将输入的文本按照预览的样式生成图片，并以 ZIP 文件的形式下载。
代码结构与组件分析 表单输入区域 用户可以在这里输入要转换的文本内容，并对字体样式、大小、颜色，背景颜色、图片尺寸、水印设置和边距设置等进行调整。例如：
&amp;lt;el-form label-width=&amp;#34;100px&amp;#34;&amp;gt; &amp;lt;el-form-item label=&amp;#34;文本内容&amp;#34;&amp;gt; &amp;lt;el-input v-model=&amp;#34;text&amp;#34; type=&amp;#34;textarea&amp;#34; :rows=&amp;#34;4&amp;#34; placeholder=&amp;#34;请输入要转换的文本内容&amp;#34; class=&amp;#34;input-text&amp;#34; /&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;!-- 其他表单项... --&amp;gt; &amp;lt;/el-form&amp;gt; 预览区域 实时展示根据用户设置生成的图片预览效果，方便用户在生成图片前进行确认。
&amp;lt;div class=&amp;#34;preview-container-wrapper&amp;#34;&amp;gt; &amp;lt;div v-for=&amp;#34;(page, index) in pages&amp;#34; :key=&amp;#34;index&amp;#34; class=&amp;#34;preview-container&amp;#34; :style=&amp;#34;previewStyle(index)&amp;#34;&amp;gt; &amp;lt;div ref=&amp;#34;textCanvas&amp;#34; class=&amp;#34;text-canvas&amp;#34; :style=&amp;#34;textStyle(index)&amp;#34;&amp;gt; {{ page || &amp;#39;预览效果&amp;#39; }} &amp;lt;div class=&amp;#34;watermark&amp;#34; :style=&amp;#34;watermarkStyle()&amp;#34;&amp;gt;{{ watermarkText }}&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 操作按钮 提供 “生成图片” 按钮，点击后触发图片生成和下载操作。
&amp;lt;el-button type=&amp;#34;primary&amp;#34; @click=&amp;#34;generateImage&amp;#34; :disabled=&amp;#34;!text&amp;#34; class=&amp;#34;generate-button&amp;#34;&amp;gt; 生成图片 &amp;lt;/el-button&amp;gt; 状态定义 使用 ref​ 定义了多个响应式状态，用于存储用户输入的文本、字体样式、背景设置等信息。</description></item><item><title>《Nuxt.js 实战：从放弃到入门》五、还在为图片裁剪发愁？用它吧！</title><link>https://flowstone.github.io/post/2025/20250214-03/</link><pubDate>Fri, 14 Feb 2025 19:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250214-03/</guid><description>功能说明 设计目标：图片裁剪功能页面旨在实现自由裁剪、固定比例裁剪等丰富功能，为用户提供高效、便捷的图片处理体验。页面使用 Element Plus 组件库搭建，确保界面美观且交互易用，提升用户操作的流畅性和满意度。 页面功能： 图片上传区域：支持用户通过拖拽或点击的方式上传图片，仅支持 JPG 和 PNG 格式，文件大小限制为 10MB。 裁剪预览区域：展示上传的图片，并提供可视化的裁剪操作界面，方便用户实时预览裁剪效果。 裁剪参数设置面板：用户可在此设置裁剪比例，包括自由裁剪以及 1:1、4:3、16:9 等常见固定比例，还能进行向左旋转、向右旋转、水平翻转、垂直翻转等操作。 第三方库集成 实现图片裁剪功能依赖cropperjs库，使用以下命令进行安装：
npm install cropperjs ​​
‍
代码实现 创建页面文件：在项目中创建crop.vue文件，用于实现图片裁剪功能页面。 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;el-card&amp;gt; &amp;lt;template #header&amp;gt; &amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;text-xl font-medium&amp;#34;&amp;gt;图片裁剪&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;!-- 图片上传区域 --&amp;gt; &amp;lt;el-upload class=&amp;#34;upload-area&amp;#34; drag :auto-upload=&amp;#34;false&amp;#34; :show-file-list=&amp;#34;false&amp;#34; accept=&amp;#34;image/*&amp;#34; :on-change=&amp;#34;handleFileSelect&amp;#34; &amp;gt; &amp;lt;template #trigger&amp;gt; &amp;lt;div v-if=&amp;#34;!imageUrl &amp;amp;&amp;amp; !isLoading &amp;amp;&amp;amp; !errorMessage&amp;#34; class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;el-icon class=&amp;#34;el-icon--upload mx-auto block&amp;#34;&amp;gt;&amp;lt;upload-filled /&amp;gt;&amp;lt;/el-icon&amp;gt; &amp;lt;div class=&amp;#34;el-upload__text&amp;#34;&amp;gt; 拖拽图片到此处或 &amp;lt;em&amp;gt;点击上传&amp;lt;/em&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;text-sm text-gray-400 mt-2&amp;#34;&amp;gt;支持 JPG、PNG 格式&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;div v-if=&amp;#34;isLoading&amp;#34; class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;el-icon class=&amp;#34;is-loading&amp;#34; :size=&amp;#34;24&amp;#34;&amp;gt;&amp;lt;loading /&amp;gt;&amp;lt;/el-icon&amp;gt; &amp;lt;div class=&amp;#34;text-gray-600&amp;#34;&amp;gt;正在处理图片.</description></item><item><title>《Nuxt.js 实战：从放弃到入门》四、轻松制作朋友圈九宫格图片</title><link>https://flowstone.github.io/post/2025/20250214-02/</link><pubDate>Fri, 14 Feb 2025 18:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250214-02/</guid><description>功能说明 设计风格：图片分割功能页面将参考某网页的设计风格，使用 Element Plus 组件库实现界面，旨在确保用户体验流畅，同时保证界面的美观性与易用性。 页面功能： 图片上传区域：支持用户将图片直接拖拽到指定区域进行上传，也可点击上传。仅支持 JPG 和 PNG 格式，文件大小限制为 10MB。 分割参数设置：用户可通过输入行数和列数来设置图片分割的参数，行数和列数的取值范围为 1 到 10。 预览区域：提供上传图片的预览以及分割后图片的预览，方便用户查看分割效果。 下载功能：支持将分割后的图片打包成 ZIP 文件进行下载。 ‍
代码实现 创建页面文件：在项目中创建divide.vue文件，用于实现图片分割功能页面。 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;el-card&amp;gt; &amp;lt;template #header&amp;gt; &amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;text-xl font-medium&amp;#34;&amp;gt;图片分割&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;!-- 图片上传区域 --&amp;gt; &amp;lt;el-upload class=&amp;#34;upload-area&amp;#34; drag :auto-upload=&amp;#34;false&amp;#34; :show-file-list=&amp;#34;false&amp;#34; accept=&amp;#34;image/*&amp;#34; :on-change=&amp;#34;handleFileSelect&amp;#34; &amp;gt; &amp;lt;template #trigger&amp;gt; &amp;lt;div v-if=&amp;#34;!imageUrl &amp;amp;&amp;amp; !isLoading &amp;amp;&amp;amp; !errorMessage&amp;#34; class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;el-icon class=&amp;#34;el-icon--upload mx-auto block&amp;#34;&amp;gt;&amp;lt;upload-filled /&amp;gt;&amp;lt;/el-icon&amp;gt; &amp;lt;div class=&amp;#34;el-upload__text&amp;#34;&amp;gt; 拖拽图片到此处或 &amp;lt;em&amp;gt;点击上传&amp;lt;/em&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;text-sm text-gray-400 mt-2&amp;#34;&amp;gt;支持 JPG、PNG 格式&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;div v-if=&amp;#34;isLoading&amp;#34; class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;el-icon class=&amp;#34;is-loading&amp;#34; :size=&amp;#34;24&amp;#34;&amp;gt;&amp;lt;loading /&amp;gt;&amp;lt;/el-icon&amp;gt; &amp;lt;div class=&amp;#34;text-gray-600&amp;#34;&amp;gt;正在处理图片.</description></item><item><title>《Nuxt.js 实战：从放弃到入门》三、超实用！ 打造图片压缩神器</title><link>https://flowstone.github.io/post/2025/20250214-01/</link><pubDate>Fri, 14 Feb 2025 16:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250214-01/</guid><description>功能说明 设计风格：图片压缩功能页面将参考网络部分网站的设计风格，采用 Element Plus 组件进行开发，以确保界面美观且易用。 页面功能： 拖拽上传区域：支持用户将图片直接拖拽到指定区域进行上传，也可点击上传。 图片压缩选项：通过滑块控制压缩质量，用户可根据需求调整。 批量图片处理功能：支持同时上传和压缩多张图片。 对比预览：提供压缩前后图片的对比预览，方便用户查看效果。 代码实现 创建页面文件：在pages目录下创建compress.vue文件。 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;el-card&amp;gt; &amp;lt;template #header&amp;gt; &amp;lt;div class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;text-xl font-medium&amp;#34;&amp;gt;图片压缩&amp;lt;/span&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;!-- 图片上传区域 --&amp;gt; &amp;lt;el-upload class=&amp;#34;upload-area&amp;#34; drag multiple :auto-upload=&amp;#34;false&amp;#34; :show-file-list=&amp;#34;true&amp;#34; accept=&amp;#34;image/*&amp;#34; :on-change=&amp;#34;handleFileSelect&amp;#34; :on-remove=&amp;#34;handleFileRemove&amp;#34; :file-list=&amp;#34;fileList&amp;#34; &amp;gt; &amp;lt;template #trigger&amp;gt; &amp;lt;div v-if=&amp;#34;!isLoading&amp;#34; class=&amp;#34;text-center&amp;#34;&amp;gt; &amp;lt;el-icon class=&amp;#34;el-icon--upload mx-auto block&amp;#34;&amp;gt;&amp;lt;upload-filled /&amp;gt;&amp;lt;/el-icon&amp;gt; &amp;lt;div class=&amp;#34;el-upload__text&amp;#34;&amp;gt; 拖拽图片到此处或 &amp;lt;em&amp;gt;点击上传&amp;lt;/em&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;text-sm text-gray-400 mt-2&amp;#34;&amp;gt;支持 JPG、PNG、WebP 格式&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/el-upload&amp;gt; &amp;lt;!-- 压缩设置 --&amp;gt; &amp;lt;div v-if=&amp;#34;fileList.length &amp;gt; 0&amp;#34; class=&amp;#34;compression-settings&amp;#34;&amp;gt; &amp;lt;el-form&amp;gt; &amp;lt;el-form-item label=&amp;#34;压缩质量&amp;#34; style=&amp;#34;min-width: 400px;&amp;#34;&amp;gt; &amp;lt;el-row :gutter=&amp;#34;20&amp;#34; style=&amp;#34;width: 100%;&amp;#34;&amp;gt; &amp;lt;el-col :span=&amp;#34;18&amp;#34;&amp;gt; &amp;lt;el-slider v-model=&amp;#34;quality&amp;#34; :min=&amp;#34;1&amp;#34; :max=&amp;#34;100&amp;#34; :format-tooltip=&amp;#34;value =&amp;gt; `${value}%`&amp;#34; @input=&amp;#34;handleQualityChange&amp;#34; /&amp;gt; &amp;lt;/el-col&amp;gt; &amp;lt;el-col :span=&amp;#34;5&amp;#34; :offset=&amp;#34;1&amp;#34; class=&amp;#34;text-right&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;text-gray-600&amp;#34;&amp;gt;{{ quality }}%&amp;lt;/span&amp;gt; &amp;lt;/el-col&amp;gt; &amp;lt;/el-row&amp;gt; &amp;lt;/el-form-item&amp;gt; &amp;lt;el-button type=&amp;#34;primary&amp;#34; @click=&amp;#34;compressImages&amp;#34; :loading=&amp;#34;isLoading&amp;#34; :disabled=&amp;#34;fileList.</description></item><item><title>《Nuxt.js 实战：从放弃到入门》二、公共头部脚部组件创建及 Element Plus 集成</title><link>https://flowstone.github.io/post/2025/20250213-02/</link><pubDate>Thu, 13 Feb 2025 19:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250213-02/</guid><description>在项目开发过程中，引入公共头部和脚部组件，有助于实现页面布局的统一，提升用户体验。以下是具体的实施步骤和相关代码。
首先，需要创建一个目录，用于存放相关组件文件，为项目文件结构提供清晰的组织方式。
​​
创建 Header.vue 组件
Header.vue 组件定义了页面的公共头部部分，包含导航链接等内容。其代码如下：
&amp;lt;template&amp;gt; &amp;lt;header class=&amp;#34;bg-white shadow-sm&amp;#34;&amp;gt; &amp;lt;nav class=&amp;#34;container mx-auto px-4 py-3&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;flex items-center justify-between&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;flex items-center space-x-4&amp;#34;&amp;gt; &amp;lt;NuxtLink to=&amp;#34;/&amp;#34; class=&amp;#34;text-xl font-bold text-gray-800&amp;#34;&amp;gt;OutEasy&amp;lt;/NuxtLink&amp;gt; &amp;lt;div class=&amp;#34;hidden md:flex space-x-4&amp;#34;&amp;gt; &amp;lt;NuxtLink to=&amp;#34;/resize&amp;#34; class=&amp;#34;text-gray-600 hover:text-gray-900&amp;#34;&amp;gt;图片调整&amp;lt;/NuxtLink&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; &amp;lt;/template&amp;gt; ​创建 Footer.vue 组件
Footer.vue 组件定义了页面的公共脚部部分，包含版权信息和相关链接。其代码如下：
&amp;lt;template&amp;gt; &amp;lt;footer class=&amp;#34;bg-gray-50 border-t&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;container mx-auto px-4 py-6&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;flex flex-col items-center justify-center space-y-2&amp;#34;&amp;gt; &amp;lt;p class=&amp;#34;text-gray-600 text-sm&amp;#34;&amp;gt;&amp;amp;copy; 2024 OutEasy. All rights reserved.</description></item><item><title>《Nuxt.js 实战：从放弃到入门》一、项目初始，图片尺寸缩放</title><link>https://flowstone.github.io/post/2025/20250213-01/</link><pubDate>Thu, 13 Feb 2025 18:18:42 +0000</pubDate><guid>https://flowstone.github.io/post/2025/20250213-01/</guid><description>环境准备 在开始之前，确保你的开发环境已经安装了以下工具：
Node.js：建议安装最新的 LTS 版本，可以从 Node.js 官网 下载安装。 npm 或 yarn：npm 会随着 Node.js 一起安装，yarn 可以通过 npm install -g yarn​ 进行全局安装。 同时，为了方便管理 Node.js 版本，推荐安装 nvm​（Node Version Manager），安装命令如下：
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash 安装完成后，重新打开终端或者执行 source ~/.nvm/nvm.sh​ 使其生效。
‍
创建 Nuxt.js 项目 环境搭建好后，就可以开始创建 Nuxt.js 项目啦。打开终端，依次执行下面这些命令：
mkdir outeasy cd outeasy npx nuxi@latest init npm install 这些命令分别是什么意思呢？
mkdir outeasy：创建一个名为outeasy的文件夹，用来存放我们的项目文件。 cd outeasy：进入刚刚创建的outeasy文件夹，后续的操作都在这个目录下进行。 npx nuxi@latest init：使用 npx 工具调用 nuxi ，把当前目录初始化为一个 Nuxt.js 项目。npx是 npm 5.2.0 引入的一个工具，它能直接运行依赖包，不用提前全局安装。 npm install：安装项目所需要的各种依赖包。这些依赖包是项目运行必不可少的，比如 Nuxt.</description></item></channel></rss>