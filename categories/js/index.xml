<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JS on 薛尧笔记</title><link>https://xueyao.netlify.app/categories/js/</link><description>Recent content in JS on 薛尧笔记</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 17 Feb 2021 13:07:07 +0000</lastBuildDate><atom:link href="https://xueyao.netlify.app/categories/js/index.xml" rel="self" type="application/rss+xml"/><item><title>Ant Design中使用Upload上传组件如何自定义文件列表展示位置</title><link>https://xueyao.netlify.app/post/2021/react-ant-upload-component-custom/</link><pubDate>Wed, 17 Feb 2021 13:07:07 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/react-ant-upload-component-custom/</guid><description>软件环境 macOS Big Sur 11.1 React 16.12.0 Ant Design 4.10.0 实际效果 现有一个需求，是上传文件，点击浏览文件按钮，选中文件后，在按钮的上方显示，上传的文件列表，如下图所示 当前效果 目前使用阿里的Ant UI组件库，使用其中的上传组件，官方提供的示例，如下图如示 本地使用后，如下图所示 如何才能实现，我们需要的效果呢，Google了好多文章，找到了一种方式，就是重写itemRender方法，自定义文件列表的展示，使用这个方法，需要重写多个action。
后来查看公司前端人员写的代码，看到另一种解决方法。
主要使用两个Upload组件，第一个Upload组件主要是展示文件列表，第二个Upload组件是选择文件上传的这个操作，不过，选择文件后，把文件列表在下方展示隐藏起来。
showUploadList: false, //不显示上传的列表 把得到的文件列表，赋值给第一个Upload组件中，大概如下：
beforeUpload(file: any, fileList: any) { setFileList(fileList); //设置文件列表 return false; //不要调用上传文件接口 }, &amp;lt;!--第一个Upload组件--&amp;gt; &amp;lt;Upload fileList={fileList}&amp;gt;&amp;lt;/Upload&amp;gt; 部分代码如下：
&amp;lt;StyleContent&amp;gt; &amp;lt;StyleMainContent&amp;gt; &amp;lt;Button onClick={btnOnClick} type=&amp;#34;primary&amp;#34;&amp;gt;打开上传&amp;lt;/Button&amp;gt; &amp;lt;Modal visible={isVisible} title=&amp;#34;上传附件&amp;#34; footer={[]} closable&amp;gt; &amp;lt;div style={{ border: &amp;#39;1px solid #ccc&amp;#39;, height: 150, marginBottom: 10 }}&amp;gt; &amp;lt;Upload fileList={fileList} onChange={onChange}&amp;gt;&amp;lt;/Upload&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div style={{ textAlign: &amp;#39;right&amp;#39; }}&amp;gt; &amp;lt;Upload {.</description></item><item><title>React中如何实现文件下载功能</title><link>https://xueyao.netlify.app/post/2021/react-design-file-download-function/</link><pubDate>Tue, 05 Jan 2021 13:05:30 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/react-design-file-download-function/</guid><description>场景描述 在前端页面中，经常会使用到文件下载功能，我们如何实现下载功能呢？
开发环境 React ^16.12.0 Ant Design ^5.0.12 SpringBoot 2.3.0 问题分析 首先，想到下载，肯定要涉及文件流(字节流)，后端接口返回文件流，前端页面把文件流保存成对应的文件。
后端接口设计 写一个无返回值的方法，方法参数是HttpServletResponse，代码如下所示
//SmsTemplateController.java @GetMapping(&amp;#34;/download&amp;#34;) public void download(HttpServletResponse response) throws IOException { smsTemplateService.download(response); } 接口的具体实现，如下所示
//SmsTemplateServiceImpl.java @Override public void download(HttpServletResponse response) throws IOException { //设置字符集 response.setCharacterEncoding(&amp;#34;utf-8&amp;#34;); //response.setContentType(&amp;#34;application/vnd.ms-excel&amp;#34;); //设置响应的头 response.setHeader(&amp;#34;Content-Disposition&amp;#34;, &amp;#34;attachment;filename = &amp;#34; + &amp;#34;helloworld.png&amp;#34;); //获得响应的字节流 OutputStream outputStream = response.getOutputStream(); //文件写死，根据需求改变 File file = new File(&amp;#34;/Users/simonxue/Developer/Temp/file.png&amp;#34;); //把文件内容复制到字节输出流中 FileIoUtil.copyFile(file, outputStream); } 我们的文件流主要是放在接口响应中，其中涉及到一个工具类，如下所示
//FileIoUtil.java /** * 复制file中的内容到输出流中 * @param file 文件内容 * @param out 输出流 * @throws IOException */ public static void copyFile(File file, OutputStream out) throws IOException { InputStream input = null; try { input = new FileInputStream(file); byte[] buf = new byte[1024]; int bytesRead; while ((bytesRead = input.</description></item><item><title>React中如何实现文件上传功能</title><link>https://xueyao.netlify.app/post/2021/react-design-file-upload-function/</link><pubDate>Mon, 04 Jan 2021 13:04:42 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/react-design-file-upload-function/</guid><description>场景描述 在前端页面中，经常会使用到文件上传功能，我们如何实现上传功能呢？
开发环境 React ^16.12.0 Ant Design ^5.0.12 SpringBoot 2.3.0 页面实现文件上传 首先我们要用到Ant框架中自带的上传组件Upload，代码如下所示
//index.tsx const props = { //组件的名字，调用接口时传递的名称 name: &amp;#39;file&amp;#39;, //上传前的操作 beforeUpload: (file: any, fileList: any) =&amp;gt; { console.log(&amp;#39;file, fileList&amp;#39;, file, fileList); //上传的文件列表 setFileList(fileList); //返回false 代表暂停上传 需要我们自己实现 return false; }, }; //下面代码是上传按钮 &amp;lt;Upload {...props}&amp;gt; &amp;lt;Button icon={&amp;lt;UploadOutlined /&amp;gt;}&amp;gt;选择&amp;lt;/Button&amp;gt; &amp;lt;/Upload&amp;gt; 上述代码，可以实现一个上传功能，但是还没有和后端有交互，效果图如下 我们再添加一个上传按钮，来和后端交互，代码如下所示
//index.tsx &amp;lt;Col style={{ margin: &amp;#39;10px 20px&amp;#39; }}&amp;gt; &amp;lt;Upload {...props}&amp;gt; &amp;lt;Button icon={&amp;lt;UploadOutlined /&amp;gt;}&amp;gt;选择&amp;lt;/Button&amp;gt; &amp;lt;/Upload&amp;gt; &amp;lt;/Col&amp;gt; &amp;lt;Col style={{ margin: &amp;#39;10px 20px&amp;#39; }}&amp;gt; &amp;lt;Button type=&amp;#34;primary&amp;#34; onClick={uploadOnClick}&amp;gt; 上传 &amp;lt;/Button&amp;gt; &amp;lt;/Col&amp;gt; 上传按钮绑定了一个事件uploadOnClick，如下所示</description></item><item><title>JS中绑定方法加括号和不加括号的区别</title><link>https://xueyao.netlify.app/post/2021/js-method-add-or-remove-bracket-different/</link><pubDate>Sun, 03 Jan 2021 13:03:55 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/js-method-add-or-remove-bracket-different/</guid><description> 问题描述 在React开发中，遇到一个页面不停调用接口问题，如下图所示 问题解决 查找哪里调用了接口，最后在刷新按钮上找到了问题所在，如下所示
&amp;lt;Button type=&amp;#34;text&amp;#34; icon={&amp;lt;ReloadOutlined /&amp;gt;} title=&amp;#34;刷新&amp;#34; onClick={loadData()} /&amp;gt; 按钮的点击事件上绑定了一个方法，loadData这是一个普通的查询接口，问题就是loadData()后面加了一对括号，如果我把括号去掉，问题就可以完美解决了，如下所示
&amp;lt;Button type=&amp;#34;text&amp;#34; icon={&amp;lt;ReloadOutlined /&amp;gt;} title=&amp;#34;刷新&amp;#34; onClick={loadData} /&amp;gt; 问题思考 为什么会出现这个问题？
Google了一会，得到了我想要的答案
onClick中绑定方法加括号：相当于直接把函数的返回值给onClick方法，会直接触发点击事件，不需要用户点击 onClick中绑定方法不加括号：相当于把整个函数赋值给onClick方法，不会触发点击事件，需要用户点击</description></item><item><title>React中useState如何给对象中的某一个属性赋值</title><link>https://xueyao.netlify.app/post/2021/react-usestate-with-object-update-one-assignment/</link><pubDate>Sat, 02 Jan 2021 13:03:06 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/react-usestate-with-object-update-one-assignment/</guid><description>问题描述 在React文件中使用了useState，定义了查询条件，这个查询条件实际上是一个对象，如下所示
const [requestParam, setRequestParam] = useState({ pageNum: 1, pageSize: 2, startTime: &amp;#34;&amp;#34;, endTime: &amp;#34;&amp;#34;, mobile: &amp;#34;&amp;#34;, sort: &amp;#34;&amp;#34;, sortField: &amp;#34;&amp;#34; }); 这些参数是查询接口的请求参数，在一般情况下，我们只需要更新其中一个属性的值，在使用setRequestParam修改这些值时，会提示需要给所有参数赋值，如何才能更新某一个值呢？
问题解决 通过Google查询了一下，终于在stackoverflow网站上，看到了大佬们的解答，问题是两年前的问题，我从中找一个容易理解答案，如下所示
setRequestParam(param =&amp;gt; ({ ...param, //如果我要改变mobile的值可以这样写 mobile: &amp;#39;13100008888&amp;#39; })); 看到上面的答案，应该知道采用es中的解构赋值来更新某个值</description></item><item><title>React Ant框架中分页的快速使用</title><link>https://xueyao.netlify.app/post/2021/fast-use-pagination-in-react-ant/</link><pubDate>Fri, 01 Jan 2021 13:00:01 +0000</pubDate><guid>https://xueyao.netlify.app/post/2021/fast-use-pagination-in-react-ant/</guid><description>使用环境 React Ant Design SpringBoot Spring Data JPA 前端页面 首先，我们要查看Ant官方文档，一般涉及到分页的页面都是列表查询，在表格组件中找到API，可以从API中看到使用方法，查看文档后，编写代码如下
&amp;lt;Pagination //默认当前页是接口返回的当前页 defaultCurrent={responseParam.pageNum} //每页条数 取得是接口返回的每页条数 pageSize={responseParam.pageSize} //总条数 取得是接口返回的总条数 total={responseParam.count} //指定每页可以显示多少条	pageSizeOptions={[&amp;#34;2&amp;#34;,&amp;#34;4&amp;#34;,&amp;#34;6&amp;#34;]} //是否展示 pageSize 切换器 showSizeChanger /**页码改变的回调，参数是改变后的页码及每页条数 * @param page 改变后页码 * @param pageSize 每页条数 */ onChange={(page: any, pageSize: any) =&amp;gt; { console.log(&amp;#39;page = &amp;#39;, page, pageSize); setRequestParam(param =&amp;gt; ({ ...param, //修改页码 pageNum: page, //修改每页条数 pageSize: pageSize })); }}/&amp;gt; requestParam定义格式如下:
const [requestParam, setRequestParam] = useState({ //给页码默认值 pageNum: 1, //每页条数默认值 pageSize: 10 }); 当每次我们修改requestParam的值时，就会重新调用接口渲染页面，如下所示:</description></item><item><title>Java编程思想学习总结一(一切都是对象)</title><link>https://xueyao.netlify.app/post/2019/java-idea-study/</link><pubDate>Thu, 07 Feb 2019 12:24:05 +0000</pubDate><guid>https://xueyao.netlify.app/post/2019/java-idea-study/</guid><description>存储位置 寄存器 堆栈 存储对象引用，堆栈指针向下移动，分配新的内存，向上移动，释放内存 堆 存储Java对象 常量存储 存储常量值 非RAM存储 存储流对象和持久化对象 基本类型所占存储空间 基本类型 大小 包装器类型 默认值 boolean 16bit Boolean false char 16bit Character ‘\u0000’（null） byte 8bit Byte 0 short 16bit Short 0 int 32bit Integer 0 long 64bit Long 0L float 32bit Float 0.0F double 64bit Double 0.0D 永远不需要销毁对象
执行new来创建对象时，数据存储空间才被分配
static作用于某个字段时，都只有一份存储空间
文档注释 javadoc只能为public和protected成员进行文档注释
@see : 引用其化类
{@link package.class#member label} 用于行内，并且是用label作为超链接
{@docRoot} 该标签产生到文档根目录的相对路径，用于文档树页面的显式超链接
{@inheritDoc} 该标签从当前这个类的最直接的基类中继承相关文档到当前的文档注释中
@version 生成版本
@author 作者信息
@since 该标签允许你指定程序代码最早使用的版本</description></item><item><title>AngularJS动态特效之验证码按钮倒计时</title><link>https://xueyao.netlify.app/post/2017/angularjs-effect-verification-code/</link><pubDate>Sat, 11 Nov 2017 12:08:39 +0000</pubDate><guid>https://xueyao.netlify.app/post/2017/angularjs-effect-verification-code/</guid><description>功能需求 当用户注册或者找回密码时，输入注册的手机号发送验证码到手机中，点击发送验证码按钮倒计时这个功能是如何实现呢？
效果如下 表单代码如下 &amp;lt;div class=&amp;#34;signup&amp;#34; ng-app=&amp;#34;signupApp&amp;#34; ng-controller=&amp;#34;signupCtrl&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;col-md-9 signupbox&amp;#34;&amp;gt; &amp;lt;form id=&amp;#34;signupForm&amp;#34; action=&amp;#34;customer_regist.action&amp;#34; method=&amp;#34;post&amp;#34; class=&amp;#34;form col-md-6&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;form-group&amp;#34;&amp;gt; &amp;lt;label for=&amp;#34;inputaccount&amp;#34; class=&amp;#34;col-sm-3 control-label&amp;#34;&amp;gt; &amp;lt;b&amp;gt;*&amp;lt;/b&amp;gt;验证码&amp;lt;/label&amp;gt; &amp;lt;div class=&amp;#34;col-sm-5&amp;#34;&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34; name=&amp;#34;checkcode&amp;#34; class=&amp;#34;form-control&amp;#34; id=&amp;#34;inputaccount&amp;#34; placeholder=&amp;#34;请输入验证码&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;col-sm-3 song&amp;#34;&amp;gt; &amp;lt;button type=&amp;#34;button&amp;#34; id=&amp;#34;checkCode&amp;#34; class=&amp;#34;btn btn-default&amp;#34; ng-bind=&amp;#34;checkcodemsg&amp;#34; ng-click=&amp;#34;getCheckCode()&amp;#34;&amp;gt;获取验证码&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;form&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; JS代码如下 &amp;lt;!--验证码倒计时--&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; angular.module(&amp;#34;signupApp&amp;#34;, []) .controller(&amp;#34;signupCtrl&amp;#34;, [&amp;#34;$scope&amp;#34;, function ($scope) { //按钮初始化的名字 $scope.checkcodemsg = &amp;#34;获取验证码&amp;#34;; //倒计时变量，默认60秒 var second = 5; //定时器对象 var secondInterval = undefined; //是否允许发送验证码的标识 var enableFlag = true; //获取验证码点击事件 $scope.</description></item><item><title>AJAX省市县三级联动的实现</title><link>https://xueyao.netlify.app/post/2017/js-effect-third-linkage/</link><pubDate>Thu, 14 Sep 2017 12:04:08 +0000</pubDate><guid>https://xueyao.netlify.app/post/2017/js-effect-third-linkage/</guid><description>省市县数据
本例子中省市县数据保存在MySQL数据库中,部分数据截图如下:
从数据库中读取数据
1、导入需要的jar包
2、连接池配置文件
&amp;lt;c3p0-config&amp;gt; &amp;lt;!-- 默认配置，如果没有指定则使用这个配置 --&amp;gt; &amp;lt;default-config&amp;gt; &amp;lt;property name=&amp;#34;driverClass&amp;#34;&amp;gt;com.mysql.jdbc.Driver&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;jdbcUrl&amp;#34;&amp;gt;jdbc:mysql://127.0.0.1:3306/test&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;user&amp;#34;&amp;gt;root&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;password&amp;#34;&amp;gt;数据库密码&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;checkoutTimeout&amp;#34;&amp;gt;30000&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;idleConnectionTestPeriod&amp;#34;&amp;gt;30&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;initialPoolSize&amp;#34;&amp;gt;10&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;maxIdleTime&amp;#34;&amp;gt;30&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;maxPoolSize&amp;#34;&amp;gt;100&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;minPoolSize&amp;#34;&amp;gt;10&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;maxStatements&amp;#34;&amp;gt;200&amp;lt;/property&amp;gt; &amp;lt;user-overrides user=&amp;#34;test-user&amp;#34;&amp;gt; &amp;lt;property name=&amp;#34;maxPoolSize&amp;#34;&amp;gt;10&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;minPoolSize&amp;#34;&amp;gt;1&amp;lt;/property&amp;gt; &amp;lt;property name=&amp;#34;maxStatements&amp;#34;&amp;gt;0&amp;lt;/property&amp;gt; &amp;lt;/user-overrides&amp;gt; &amp;lt;/default-config&amp;gt; &amp;lt;/c3p0-config&amp;gt; 3、JDBCUtils工具类文件
通用JDBCUtils工具类文件,使用时直接引入
package org.xueyao.ajax.utils; import java.sql.Connection; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import javax.sql.DataSource; import org.apache.tomcat.jni.Thread; import com.mchange.v2.c3p0.ComboPooledDataSource; public class JDBCUtils { private static ComboPooledDataSource comboPooledDataSource = new ComboPooledDataSource(); //使用ThreadLocal存取删链接对象 private static ThreadLocal&amp;lt;Connection&amp;gt; local = new ThreadLocal&amp;lt;&amp;gt;(); public static Connection getConnection() throws SQLException{ return comboPooledDataSource.</description></item><item><title>JS小例子之二级联动</title><link>https://xueyao.netlify.app/post/2017/js-effect-second-linkage/</link><pubDate>Sat, 26 Aug 2017 11:30:20 +0000</pubDate><guid>https://xueyao.netlify.app/post/2017/js-effect-second-linkage/</guid><description>联动原理 当用户点击省级的下拉选项,选择所在省,下一个下拉选项里的选项,则变成用户选择省下的所有市的信息,不会出现其它省市的信息.
省市数据 把省市数据,保存在js文件中,以json形式保存,以便读取,下面代码使用部分数据,不影响效果
var china = [ { &amp;#34;p_name&amp;#34;: &amp;#34;吉林省&amp;#34;, &amp;#34;p_id&amp;#34;: &amp;#34;jl&amp;#34;, &amp;#34;cities&amp;#34;: [ { &amp;#34;c_name&amp;#34;: &amp;#34;长春&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;cc&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;四平&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;sp&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;通化&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;th&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;松原&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;sy&amp;#34; } ] }, { &amp;#34;p_name&amp;#34;: &amp;#34;辽宁省&amp;#34;, &amp;#34;p_id&amp;#34;: &amp;#34;ln&amp;#34;, &amp;#34;cities&amp;#34;: [ { &amp;#34;c_name&amp;#34;: &amp;#34;沈阳&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;sy&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;大连&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;dl&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;抚顺&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;fs&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;铁岭&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;tl&amp;#34; } ] }, { &amp;#34;p_name&amp;#34;: &amp;#34;山东省&amp;#34;, &amp;#34;p_id&amp;#34;: &amp;#34;sd&amp;#34;, &amp;#34;cities&amp;#34;: [ { &amp;#34;c_name&amp;#34;: &amp;#34;济南&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;jn&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;青岛&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;qd&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;威海&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;wh&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;烟台&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;yt&amp;#34; } ] }, { &amp;#34;p_name&amp;#34;: &amp;#34;上海市&amp;#34;, &amp;#34;p_id&amp;#34;: &amp;#34;sh&amp;#34;, &amp;#34;cities&amp;#34;: [ { &amp;#34;c_name&amp;#34;: &amp;#34;闵行区&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;mh&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;徐汇区&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;xh&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;黄浦区&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;hp&amp;#34; }, { &amp;#34;c_name&amp;#34;: &amp;#34;浦东新区&amp;#34;, &amp;#34;c_id&amp;#34;: &amp;#34;pd&amp;#34; } ] } ]; 获取省市数据 通过js dom编程读取省市数据,把省市数据读取到对应的select选项中.</description></item><item><title>Ajax自定义日历</title><link>https://xueyao.netlify.app/post/2016/js-custom-calendar/</link><pubDate>Tue, 27 Sep 2016 22:19:51 +0000</pubDate><guid>https://xueyao.netlify.app/post/2016/js-custom-calendar/</guid><description>需求分析 在一些购物网站中，都会有促销活动，这些活动都在日历上标注出来，如何通过Ajax让日历
通过读取数据库中的信息，正确的把促销活动标注在日历上，本文通过自定义日历来实现这个问题。
技术难点 日历的布局
日历的初始化
日历的动态变化
日历的促销定制
实现方法 1、 先创建一个固定的日历，效果如下
html代码如下
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; * {margin: 0; padding: 0;} body {font-size: 13px;} .calendar {width: 330px; margin: 0 auto;} .calendar .title { position: relative; width: 100%; height: 30px; line-height: 30px; background: #17a4eb; } .title div {position: absolute;} .prev {left: 10px; } .now {left: 40%;} .next {right: 10px;} input {height: 30px; width: 300px; margin: 100px 475px 0px;} table {width: 100%; border-collapse: collapse;} table th {border: 1px solid #ccc;} table td {text-align: center; border: 1px solid #ccc;} &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;calendar&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;title&amp;#34;&amp;gt; &amp;lt;div class=&amp;#34;prev&amp;#34;&amp;gt; &amp;lt;span&amp;gt;08&amp;lt;/span&amp;gt;月 &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;now&amp;#34;&amp;gt; &amp;lt;span&amp;gt;2016&amp;lt;/span&amp;gt;年 &amp;lt;span&amp;gt;09&amp;lt;/span&amp;gt;月 &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;next&amp;#34;&amp;gt; &amp;lt;span&amp;gt;10&amp;lt;/span&amp;gt;月 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;table&amp;gt; &amp;lt;!</description></item><item><title>JS特效-轮播图</title><link>https://xueyao.netlify.app/post/2016/js-effect-carousel/</link><pubDate>Sat, 17 Sep 2016 22:17:35 +0000</pubDate><guid>https://xueyao.netlify.app/post/2016/js-effect-carousel/</guid><description>效果如下 功能分析 每隔1秒换一张图片 鼠标移入停止切换、鼠标离开继续切换 鼠标移入到数字上面的时候,显示和数字对应的图片,并且停止切换,被选中的数字,背景显示橙色 鼠标离开数字,从该数字后面继续显示 代码如下 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;&amp;#34;&amp;gt; &amp;lt;style type=&amp;#34;text/css&amp;#34;&amp;gt; div, img, ul, li { padding: 0px; margin: 0px; } .content { width: 480px; height: 300px; border: 1px solid red; margin: 100px auto; } img { width: 100%; height: 100%; padding-bottom: 10px; } ul li { list-style: none; float: left; border: 1px solid orange; height: 30px; width: 58px; text-align: center; line-height: 30px; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;.</description></item></channel></rss>