<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring on 薛尧笔记</title><link>https://flowstone.github.io/categories/spring/</link><description>Recent content in Spring on 薛尧笔记</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 13 Feb 2019 12:24:52 +0000</lastBuildDate><atom:link href="https://flowstone.github.io/categories/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring自定义注解详解</title><link>https://flowstone.github.io/post/2019/spring-custom-annotate/</link><pubDate>Wed, 13 Feb 2019 12:24:52 +0000</pubDate><guid>https://flowstone.github.io/post/2019/spring-custom-annotate/</guid><description>下面是RequestBody注解源码
@Target(ElementType.PARAMETER) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface RequestBody { /** * Whether body content is required. * &amp;lt;p&amp;gt;Default is {@code true}, leading to an exception thrown in case * there is no body content. Switch this to {@code false} if you prefer * {@code null} to be passed when the body content is {@code null}. * @since 3.2 */ boolean required() default true; } 现在讲一讲@RequestBody注解中用到其它注解
@Target注解
从字面上理解这个就是目标的意思，说明@RequestBody注解是作用于哪个上面
ElementType
public enum ElementType { /** Class, interface (including annotation type), or enum declaration */ TYPE, /** Field declaration (includes enum constants) */ FIELD, /** Method declaration */ METHOD, /** Formal parameter declaration */ PARAMETER, /** Constructor declaration */ CONSTRUCTOR, /** Local variable declaration */ LOCAL_VARIABLE, /** Annotation type declaration */ ANNOTATION_TYPE, /** Package declaration */ PACKAGE, /** * Type parameter declaration * * @since 1.</description></item><item><title>Spring Cloud入门教程一之Eureka Server</title><link>https://flowstone.github.io/post/2018/spring-cloud-eureka/</link><pubDate>Sat, 13 Oct 2018 12:18:13 +0000</pubDate><guid>https://flowstone.github.io/post/2018/spring-cloud-eureka/</guid><description>项目环境 MacOS JDK1.8 IntelliJ IDEA 2018.2 Maven 3.5.4 创建项目 采用Spring Initializr创建项目 选择Cloud Discovery-&amp;gt;Eureka Discovery-&amp;gt;项目名称 package me.xueyao; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer; @SpringBootApplication //注解该类是EurekaServer服务 @EnableEurekaServer public class EurekaServerApplication { public static void main(String[] args) { SpringApplication.run(EurekaServerApplication.class, args); } } 配置文件application.yml
eureka: client: service-url: defaultZone: http://localhost:8762/eureka/ register-with-eureka: false #是否在eureka中注册，false不用注册 fetch-registry: false #是否发现注册，不注册 server: enable-self-preservation: false # false表示在此eureka服务器中关闭自我保护模式#server:# port: 8761 #服务端口spring: application: name: eureka-server #应用名 启动项目，在浏览器中输入EurekaServer地址http://127.0.0.1:8761,如果页面能正常显示则说明创建Eureka Server成功</description></item><item><title>Spring的AOP编程</title><link>https://flowstone.github.io/post/2017/spring-aop/</link><pubDate>Mon, 16 Oct 2017 12:06:56 +0000</pubDate><guid>https://flowstone.github.io/post/2017/spring-aop/</guid><description>AOP为Aspect Oriented Programming(面向切面编程)
AOP的好处：在不修改源代码的情况下，可以实现功能的增强
JDK动态代理 缺点：只能针对实现了接口的类实现代理
/** * Jdk的动态代理 * @author kevin */ public class JdkProxy implements InvocationHandler{ //要代理的对象 private CustomerDao customerDao; public JdkProxy(CustomerDao customerDao){ this.customerDao = customerDao; } /** * 生成代理对象的方法 * @return */ public CustomerDao createProxy(){ CustomerDao proxy = (CustomerDao) Proxy.newProxyInstance(customerDao.getClass().getClassLoader(), customerDao.getClass().getInterfaces(), this); return proxy; } /** * 增强的方法 */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(&amp;#34;权限校验...&amp;#34;); return method.invoke(customerDao, args); } } //编写测试代码： @Test public void test(){ CustomerDao customerDao = new CustomerDaoImpl(); JdkProxy jdkProxy = new JdkProxy(customerDao); CustomerDao proxy = jdkProxy.</description></item></channel></rss>